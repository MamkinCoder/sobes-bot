import { file, write } from "bun";
import { Telegraf } from "telegraf";
import type { Message } from "telegraf/types";

interface UserData {
    username: string;
    firstMessageId: number;
    messageCount: number;
}

const BOT_TOKEN = Bun.env.BOT_TOKEN;
const GROUP_CHAT_ID = Bun.env.GROUP_CHAT_ID;
const USER_DATA_FILE = "./user_data.json";

if (!BOT_TOKEN || !GROUP_CHAT_ID) {
    console.error(".env is not setup");
    process.exit(1);
}

const bot = new Telegraf(BOT_TOKEN);

let botUserId: number;
let usersData: { [key: number]: UserData } = {};

async function readUserData() {
    try {
        const userFile = file(USER_DATA_FILE);
        if (await userFile.exists()) {
            usersData = await userFile.json();

            return;
        }
        console.log("User data file not found, starting with an empty object.");
        usersData = {};
    } catch (error) {
        console.error("Error reading user data file:", error);
    }
}

async function writeUserData() {
    try {
        await write(USER_DATA_FILE, JSON.stringify(usersData, null, 2));
    } catch (error) {
        console.error("Error writing user data file:", error);
    }
}

(async () => {
    const botInfo = await bot.telegram.getMe();
    botUserId = botInfo.id;
    console.log(`Bot started as @${botInfo.username} with ID ${botUserId}`);
    await readUserData();
})();

bot.use((ctx, next) => {
    if (ctx.message && ctx.message.chat.id === Number(GROUP_CHAT_ID) && ctx.message.from.id !== botUserId) {
        if (isTextMessage(ctx.message)) {
            console.log(`Message "${ctx.message.text}" ignored from group chat`);
        } else {
            console.log("Non-text message ignored from group chat");
        }
        return;
    }

    next();
});

bot.start(async (ctx) => {
    const userId = ctx.message.from.id;
    const username = ctx.message.from.username || `${ctx.message.from.first_name} ${ctx.message.from.last_name}`;
    const welcomeMessage = `–ü—Ä–∏–≤–µ—Ç! üëã –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–º –≤ <i>–≥—Ä—É–ø–ø–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ –Ø–Ω–¥–µ–∫—Å –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</i> —Å–æ–±–∏—Ä–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π. üë®‚Äçüíª
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –±—É–∫–≤–∞–ª—å–Ω–æ –ø–∞—Ä—É —Å–ª–æ–≤ –æ —Å–µ–±–µ, –Ω–∞–º —Ç–∞–∫ –±—É–¥–µ—Ç –ª–µ–≥—á–µ —Ç–µ–±—è –Ω–∞–π—Ç–∏ üëÄ –ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—ë —Ä–µ–∑—é–º–µ —Å–µ–π—á–∞—Å –∏–ª–∏ –ø–æ—Å–ª–µ <b>Young Con</b> —ç—Ç–æ–º—É –±–æ—Ç—É, –º—ã –µ–≥–æ —Ç–æ–∂–µ –ø–æ–ª—É—á–∏–º.

<i>‚ö†Ô∏è –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —Ç–µ–±–µ –ø–æ –Ω–∏–∫—É –º–æ–≥—É—Ç –ø–∏—Å–∞—Ç—å –Ω–µ–∑–Ω–∞–∫–æ–º—Ü—ã, –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å—é–¥–∞</i>`;

    if (!usersData[userId]) {
        await ctx.reply(welcomeMessage, { parse_mode: "HTML" });
        const sentMessage = await ctx.telegram.sendMessage(GROUP_CHAT_ID, `–ù–æ–≤—ã–π #–∫–∞–Ω–¥–∏–¥–∞—Ç: @${username}`);

        usersData[userId] = { username, firstMessageId: sentMessage.message_id, messageCount: 1 };

        await writeUserData();

        return;
    }

    await ctx.reply("–ú—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–ª–∏ —Ç–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç! –ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–∂–µ—à—å –¥–æ–∫–∏–Ω—É—Ç—å —Å—é–¥–∞ —á—Ç–æ-—Ç–æ –æ —Å–µ–±–µ –∏–ª–∏ –∞–Ω–µ–∫–¥–æ—Ç ü•∏");
});

bot.on("message", async (ctx) => {
    const userId = ctx.message.from.id;

    if (userId === botUserId) {
        console.log("Ignoring message from the bot itself");
        return;
    }

    if (!usersData[userId]) {
        await ctx.reply("–°–¥–µ–ª–∞–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üíÅ‚Äç‚ôÇÔ∏è /start");

        return;
    }

    if (usersData[userId].messageCount >= 10) {
        await ctx.reply("–ú–æ–ª–æ–¥–µ—Ü, –Ω–æ DOS'–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –±—É–¥–µ—Ç. –¢–µ–±–µ –Ω—É–∂–Ω–æ –Ω–µ –≤–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ—Ä—ã –∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∏ –∏–¥—Ç–∏ ü´£");
        return;
    }

    try {
        await bot.telegram.copyMessage(GROUP_CHAT_ID, ctx.message.chat.id, ctx.message.message_id, {
            reply_to_message_id: usersData[userId].firstMessageId,
        } as any);
        console.log("Message copied successfully");

        usersData[userId].messageCount += 1;

        await writeUserData();
    } catch (error) {
        console.error("Error processing message:", error);
    }
});

try {
    bot.launch();
    console.log("Bot started successfully");
} catch (error) {
    console.error("Error starting bot:", error);
}

function isTextMessage(message: Message): message is Message.TextMessage {
    return "text" in message;
}
